/**
 * Script para executar e validar o sistema de Error Handling
 * Executa os testes e exibe relat√≥rio completo
 */

import { errorHandlingTestSuite } from './src/tests/error-handling-test-suite';

async function runErrorHandlingValidation() {
  console.log('üöÄ Iniciando valida√ß√£o do Sistema de Error Handling Robusto...\n');

  try {
    // Executar todos os testes
    const results = await errorHandlingTestSuite.runAllTests();

    // Exibir resultados
    console.log(results.summary);

    // Verificar se os testes cr√≠ticos passaram
    const criticalTests = [
      'ErrorHandlingService - Tratamento B√°sico',
      'ErrorHandlingService - Retry Autom√°tico',
      'ErrorHandlingService - Timeout',
      'EnhancedPipelineApiService - Valida√ß√£o Arquivo',
      'RobustEnhancedPipelineService - Valida√ß√£o Pr√©via'
    ];

    const criticalFailures = results.results.filter(
      result => criticalTests.includes(result.testName) && !result.passed
    );

    if (criticalFailures.length > 0) {
      console.log('\n‚ùå TESTES CR√çTICOS FALHARAM:');
      criticalFailures.forEach(failure => {
        console.log(`‚Ä¢ ${failure.testName}: ${failure.error}`);
      });
      process.exit(1);
    }

    if (results.successRate >= 80) {
      console.log('\n‚úÖ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!');
      console.log(`Taxa de sucesso: ${results.successRate}%`);
      
      if (results.successRate === 100) {
        console.log('üéâ PERFEITO! Todos os testes passaram!');
      }
    } else {
      console.log('\n‚ö†Ô∏è  VALIDA√á√ÉO PARCIAL');
      console.log(`Taxa de sucesso: ${results.successRate}% (m√≠nimo requerido: 80%)`);
      console.log('Alguns testes falharam, mas funcionalidades cr√≠ticas est√£o operacionais.');
    }

    return results;

  } catch (error) {
    console.error('\nüí• ERRO FATAL na valida√ß√£o:', error);
    process.exit(1);
  }
}

// Executar valida√ß√£o se este arquivo for executado diretamente
if (require.main === module) {
  runErrorHandlingValidation()
    .then((results) => {
      console.log('\nüìä Relat√≥rio final:');
      console.log(`‚Ä¢ Testes executados: ${results.totalTests}`);
      console.log(`‚Ä¢ Sucessos: ${results.passed}`);
      console.log(`‚Ä¢ Falhas: ${results.failed}`);
      console.log(`‚Ä¢ Taxa de sucesso: ${results.successRate}%`);
    })
    .catch((error) => {
      console.error('Falha na execu√ß√£o:', error);
      process.exit(1);
    });
}

export { runErrorHandlingValidation };